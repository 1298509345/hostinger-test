[port]
http = 9002

[database]
dsn = "root:123456@tcp(127.0.0.1)"
max_idle = 5000 # 毫秒

[server]
address = ":9002"
dump_router_map = true
access_log_enable = true
error_log_enabled = true
pprof_enabled = true
log_path = "log/"

[server.logger]
path = "log/" # 日志文件路径。默认为空，表示关闭，仅输出到终端
file = "{Y-m-d:HH}.log" # 日志文件格式。默认为"{Y-m-d}.log"
prefix = "" # 日志内容输出前缀。默认为空
level = "all" # 日志输出级别
time_format = "2006-01-02T15:04:05" # 自定义日志输出的时间格式，使用Golang标准的时间格式配置
ctx_keys = [] # 自定义Context上下文变量名称，自动打印Context的变量到日志中。默认为空
header = true # 是否打印日志的头信息。默认true
stdout = true # 日志是否同时输出到终端。默认true
rotate_size = "100m" # 按照日志文件大小对文件进行滚动切分。默认为0，表示关闭滚动切分特性
# rotate_expire = 0 # 按照日志文件时间间隔对文件滚动切分。默认为0，表示关闭滚动切分特性
rotate_backup_limit = 10 # 按照切分的文件数量清理切分文件，当滚动切分特性开启时有效。默认为0，表示不备份，切分则删除
rotate_backup_expire = "60d" # 按照切分的文件有效期清理切分文件，当滚动切分特性开启时有效。默认为0，表示不备份，切分则删除
rotate_backup_compress = 9 # 滚动切分文件的压缩比（0-9）。默认为0，表示不压缩
rotate_check_interval = "24h" # 滚动切分的时间检测间隔，一般不需要设置。默认为1小时
stdout_color_disabled = false # 关闭终端的颜色打印。默认开启
writer_color_enable = false # 日志文件是否带上颜色。默认false，表示不带颜色



