[port]
http = 9002



[server]
address = ":9002"
dump_router_map = true
access_log_enable = true
error_log_enabled = true
pprof_enabled = true
log_path = "log/"

[server.logger]
path = "log/" # 日志文件路径。默认为空，表示关闭，仅输出到终端
file = "{Y-m-d:HH}.log" # 日志文件格式。默认为"{Y-m-d}.log"
prefix = "" # 日志内容输出前缀。默认为空
level = "all" # 日志输出级别
time_format = "2006-01-02T15:04:05" # 自定义日志输出的时间格式，使用Golang标准的时间格式配置
ctx_keys = [] # 自定义Context上下文变量名称，自动打印Context的变量到日志中。默认为空
header = true # 是否打印日志的头信息。默认true
stdout = true # 日志是否同时输出到终端。默认true
rotate_size = "100m" # 按照日志文件大小对文件进行滚动切分。默认为0，表示关闭滚动切分特性
# rotate_expire = 0 # 按照日志文件时间间隔对文件滚动切分。默认为0，表示关闭滚动切分特性
rotate_backup_limit = 10 # 按照切分的文件数量清理切分文件，当滚动切分特性开启时有效。默认为0，表示不备份，切分则删除
rotate_backup_expire = "60d" # 按照切分的文件有效期清理切分文件，当滚动切分特性开启时有效。默认为0，表示不备份，切分则删除
rotate_backup_compress = 9 # 滚动切分文件的压缩比（0-9）。默认为0，表示不压缩
rotate_check_interval = "24h" # 滚动切分的时间检测间隔，一般不需要设置。默认为1小时
stdout_color_disabled = false # 关闭终端的颜色打印。默认开启
writer_color_enable = false # 日志文件是否带上颜色。默认false，表示不带颜色

[database]
[database.logger]
path = "log/db/"
level = "all"
stdout = true

# 分组名称，可自定义，默认为default
[database.default]
# 地址
host = "35.226.49.75"
# 端口
port = "3306"
# 账号
user = "root"
# 密码
pass = "syg199908"
# 数据库名称
name = "fab-dev"
# 数据库类型(如：mariadb/tidb/mysql/pgsql/mssql/sqlite/oracle/clickhouse/dm)
type = "mysql"
# (可选)自定义数据库链接信息，当该字段被设置值时，以上链接字段(Host,Port,User,Pass,Name,Type)将失效
link = ""
# (可选)不同数据库的额外特性配置，由底层数据库driver定义，具体有哪些配置请查看具体的数据库driver介绍
extra = ""
# (可选)数据库主从角色(master/slave)，默认为master。如果不使用应用主从机制请不配置或留空即可。
role = "master"
# (可选)开启调试模式
debug = false
# (可选)表名前缀
prefix = "gf_"
# (可选)ORM空跑(只读不写)
dryRun = false
# (可选)数据库编码(如: utf8mb4/utf8/gbk/gb2312)，一般设置为utf8mb4。默认为utf8。
charset = "utf8"
# (可选)数据库连接协议，默认为TCP
protocol = "tcp"
# (可选)负载均衡权重，用于负载均衡控制，不使用应用层的负载均衡机制请置空
weight = 100
# (可选)时区配置，例如:Local
timezone = "Local"
# (可选)用以支持个别数据库服务Catalog&Schema区分的问题，原有的Schema代表数据库名称，而NameSpace代表个别数据库服务的Schema
namespace = ""
# (可选)连接池最大闲置的连接数(默认10)
maxIdle = 10
# (可选)连接池最大打开的连接数(默认无限制)
maxOpen = 100
# (可选)连接对象可重复使用的时间长度(默认30秒)
maxLifetime = "30s"
# (可选)查询语句超时时长(默认无限制，同时受ctx超时时间影响)。值为time.Parse支持的格式，如30s, 1m。
queryTimeout = "0"
# (可选)写入语句超时时长(默认无限制，同时受ctx超时时间影响)。值为time.Parse支持的格式，如30s, 1m。
execTimeout = "0"
# (可选)事务处理超时时长(默认无限制，同时受ctx超时时间影响)。值为time.Parse支持的格式，如30s, 1m。
tranTimeout = "0"
# (可选)预准备SQL语句执行超时时长(默认无限制，同时受ctx超时时间影响)。值为time.Parse支持的格式，如30s, 1m。
prepareTimeout = "0"
# (可选)自动创建时间字段名称
createdAt = "created_at"
# (可选)自动更新时间字段名称
updatedAt = "updated_at"
# (可选)软删除时间字段名称
deletedAt = "deleted_at"
# (可选)是否完全关闭时间更新特性，为true时CreatedAt/UpdatedAt/DeletedAt都将失效
timeMaintainDisabled = false
